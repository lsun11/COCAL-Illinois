subroutine calc_omega_drot(vphiy,alphw,psiw,bvydw,hyydw,omega,Jome,Jome_int)
  use phys_constant, only  : long
  use coordinate_grav_r, only : rg
  use def_matter_parameter
!  use def_vector_phi, only : vec_phi
  implicit none
  real(long), intent(in):: vphiy, alphw, psiw, bvydw, hyydw
  real(long), intent(inout):: omega
  real(long), intent(out):: Jome, Jome_int
! -- Jome: functional of Omega (specific angular momentum in Newtonian)
! -- Jome_int: integration of Jome w.r.t. omega
!
  real(long) :: p4a2, ovyu, ov2, ovphi, term1, term2, term3
  real(long) :: dJomedo, dterm1do, dterm2do, dterm3do
  real(long) :: omegaold, ddomega
  real(long) :: facfac, error, small, smallome = 1.0d-30, pmfac
!-------------------------------------------------------------
! Assyme axisymmetry.  
! Compute only on xz plane then copy to the other phi=const planes.
!
  call calc_omega_drot_bisection(vphiy,alphw,psiw,bvydw,hyydw,omega)
!
  p4a2 = psiw**4/alphw**2
  ovyu = bvydw + omega*vphiy
! This is in fact only the \omega^y component.
!      ov2 = ovyu**2+ovxu**2+ovzu**2
  ov2   = ovyu**2*(1.0d0 + hyydw)
  ovphi = ovyu*vphiy*(1.0d0 + hyydw)
  term1 = 1.0d0 - p4a2*ov2
  term2 = p4a2*ovphi
!
  Jome = term2/term1
  Jome_int = &
  &     A2DR*ome**2*((-0.7853981633974483*A2DR)/B2DR +   &
  &    (1.*A2DR**3*Jome*ome**3)/(Jome**4 + A2DR**4*ome**4) +   &
  &    (1.*A2DR**3*Jome**2*ome**2)/  &
  &     (B2DR*Jome**4 + A2DR**4*B2DR*ome**4) +   &
  &    (0.3535533905932738 + (0.5*A2DR)/B2DR)*  &
  &     atan(1. - (1.4142135623730951*Jome)/(A2DR*ome)) +   &
  &    (-0.3535533905932738 + (0.5*A2DR)/B2DR)*  &
  &     atan(1. + (1.4142135623730951*Jome)/(A2DR*ome)) +   &
  &    0.1767766952966369*Log(Jome**2 -   &
  &       1.4142135623730951*A2DR*Jome*ome + A2DR**2*ome**2) -   &
  &    0.1767766952966369*Log(Jome**2 +   &
  &       1.4142135623730951*A2DR*Jome*ome + A2DR**2*ome**2))
!
!write(6,*)'omega   ', omega
!write(6,*)'Jome    ', Jome
!write(6,*)'Jome_int', Jome_int
!
end subroutine calc_omega_drot
