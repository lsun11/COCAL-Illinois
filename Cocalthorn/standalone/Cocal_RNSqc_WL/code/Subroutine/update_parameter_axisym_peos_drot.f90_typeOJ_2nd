subroutine update_parameter_axisym_peos_drot(convf)
  use phys_constant, only  : long
  use grid_parameter, only : nrg, ntg, npg, nrf_deform, nrf, ntgxy
  use def_metric, only : psi, alph, bvyd, tfkij, tfkijkij
  use def_matter, only : omef
  use def_matter_parameter
  use coordinate_grav_r, only : rg
  use trigonometry_grav_theta, only : sinthg, costhg
  use trigonometry_grav_phi, only   : sinphig, cosphig
  use def_vector_phi, only : vec_phig
  use interface_minv
  implicit none
  real(long), intent(in) :: convf
  real(long)     ::    sgg(1:4), gg(1:4,1:4)
! "bin" is beta(in) and so on.
  real(long)     ::    bin, bmid, bout
! ain is log(\alpha^((1/R_i)^2)) (in). R_in is in fact the previous R.
  real(long)     ::    ain, amid, aout
! pain = (\phi^2/\alpha)^((1/R_i)^2) (in).
  real(long)     ::    pain, pamid, paout
! ovin is \omega(in). \omega = \beta + \Omega \phi.
  real(long)     ::    ovin, ovmid, ovout, ov
! "ov2in" is f_{ab} \omega^a \omega^b.
  real(long)     ::    ov2in, ov2mid, ov2out
! "jin" is Integral of J(Omega).
  real(long)     ::    jin, jmid, jout, jint_in, jint_mid, jint_out
  real(long)     ::    alin, almid, alout
  real(long)     ::    psin, psmid, psout
  real(long)     ::    hyin, hymid, hyout
  real(long)     ::    bxin, bxmid, bxout
  real(long)     ::    omein, omemid, omeout, omega
!
  real(long)     ::    termin, termmid, termout
  real(long)     ::    dtermdoin, dtermdomid, dtermdoout
  real(long)     ::    dtermdrin, dtermdrmid, dtermdrout      
  real(long)     ::    djintdoin, djintdomid, djintdoout, djintdo
  real(long)     ::    dodoc_in, dodoc_mid, dodoc_out, dodoc
  real(long)     ::    vphiyin, vphiymid, vphiyout, vphiy
  real(long)     ::    loghc
  real(long)     ::    radiold, berold, omeold
  real(long)     ::    ddradi, ddber, ddome
  real(long)     ::    facfac, error, hc, pre, rho, ene
  real(long)     ::    ome_mx, ome_eq, Jome, Jome_int
  real(long)     ::    dum, small = 1.0d-30, pmfac
  integer        ::    nin, nmx, numero, ii
!##############################################
  real(long)     ::    ut, hh, emdtest
!##############################################
  nin = nrf_deform
!
  sgg = 0.0d0
  gg  = 0.0d0
!
  call peos_q2hprho(emdc, hc, pre, rho, ene)
  call search_emdmax_xaxis_grid(nmx)
!  nmx = 0
!testtest
  loghc = dlog(hc)
  vphiyin  = vec_phig(nin,0,0,2)
  vphiymid = vec_phig(nmx,ntgxy,0,2)
  vphiyout = vec_phig(nrf,ntgxy,0,2)
  omeold = ome
  berold = ber
  radiold = radi
  numero = 1
!rotlaw_type1  pmfac = -1.0d0
!rotlaw_type2  pmfac =  1.0d0
! ################################################################ 
  ain  = dlog(alph(nin,0,0)**(1.d0/radi**2))
  pain = (psi(nin,0,0)**2/alph(nin,0,0))**(1.d0/radi**2)
  bin  = bvyd(nin,0,0)
  hyin = 0.0d0
  psin = psi(nin,0,0)
  alin = alph(nin,0,0)
  omein = omef(nrf,0,0)
!
  amid = dlog(alph(nmx,ntgxy,0)**(1.d0/radi**2))
  pamid= (psi(nmx,ntgxy,0)**2/alph(nmx,ntgxy,0))**(1.d0/radi**2)
  bmid = bvyd(nmx,ntgxy,0)
  hymid= 0.0d0
  psmid= psi(nmx,ntgxy,0)
  almid= alph(nmx,ntgxy,0)
  omemid=omef(nmx,ntgxy,0)
!
  aout = dlog(alph(nrf,ntgxy,0)**(1.d0/radi**2))
  paout= (psi(nrf,ntgxy,0)**2/alph(nrf,ntgxy,0))**(1.d0/radi**2)
  bout = bvyd(nrf,ntgxy,0)
  hyout= 0.0d0
  psout= psi(nrf,ntgxy,0)
  alout= alph(nrf,ntgxy,0)
  omeout=omef(nrf,ntgxy,0)
!
  ome_mx = omemid
  ome_eq = omeout
!
!  write (6,*) "test values"
!  write (6,'(1p,3e12.4)') ome, ber, radi
! ! write (6,'(1p,3e12.4)') psi(nin,0,0),psi(nmx,ntgxy,0),psi(nrf,ntgxy,0)
! ! write (6,'(1p,3e12.4)') alph(nin,0,0),alph(nmx,ntgxy,0),alph(nrf,ntgxy,0)
! ! write (6,'(1p,3e12.4)') error
!  write (6,'(1p,3e12.4)') vphiyin, vphiymid, vphiyout
!  write (6,'(1p,3e12.4)') alin, almid, alout
!  write (6,'(1p,3e12.4)') psin, psmid, psout
!  write (6,'(1p,3e12.4)') bin, bmid, bout
!  write (6,'(1p,3e12.4)') omein, omemid, omeout
!  write (6,'(1p,3e12.4)') jin, jmid, jout
!  write (6,'(1p,3e12.4)') jint_in, jint_mid, jint_out
!  write (6,'(1p,3e12.4)') ome_mx, ome_eq
!! stop
! ################################################################ 
  do
    call calc_omega_drot(vphiyin,alin,psin,bin,hyin,omein,Jome,Jome_int)
    jin  = Jome ; jint_in  = Jome_int
    call calc_omega_drot(vphiymid,almid,psmid,bmid,hymid,omemid,Jome,Jome_int)
    jmid = Jome ; jint_mid = Jome_int
    call calc_omega_drot(vphiyout,alout,psout,bout,hyout,omeout,Jome,Jome_int)
    jout = Jome ; jint_out = Jome_int
!
!  write(6,*) 'j  jint'
!  write (6,'(1p,3e12.4)') jin, jmid, jout
!  write (6,'(1p,3e12.4)') jint_in, jint_mid, jint_out
!
    ovin  = bin  + omein*vphiyin
    ovmid = bmid + omemid*vphiymid
    ovout = bout + omeout*vphiyout
! This is in fact only the \omega^y component. 
! Since only \phi^y is not 0. (We are at x axis.) 
! This is also the reason why I have those bvxd down there.
!      ov2in  = ovin**2 +bvxd(nin,0,0)**2+bvzd(nin,0,0)**2
!      ov2mid = ovmid**2+bvxd(nmx,ntgxy,0)**2+bvzd(nmx,ntgxy,0)**2
!      ov2out = ovout**2+bvxd(nrf,ntgxy,0)**2+bvzd(nrf,ntgxy,0)**2
    ov2in  = ovin**2 
    ov2mid = ovmid**2
    ov2out = ovout**2
    termin  = 1.0d0 - pain**( 2.d0*radi**2)*ov2in
    termmid = 1.0d0 - pamid**(2.d0*radi**2)*ov2mid
    termout = 1.0d0 - paout**(2.d0*radi**2)*ov2out
!
    do ii = 1, 3
      if (ii.eq.1) then 
        omega = omein  ; Jome  = jin  ; ov = ovin  ; vphiy = vphiyin 
      end if
      if (ii.eq.2) then 
        omega = omemid ; Jome  = jmid ; ov = ovmid ; vphiy = vphiymid
      end if
      if (ii.eq.3) then 
        omega = omeout ; Jome  = jout ; ov = ovout ; vphiy = vphiyout 
      end if
      ov = ov + small
!
      dodoc =   &
      & ((3.*A2DR**4*Jome**5*ome**4 - 1.*A2DR**8*Jome*ome**8 +   &
      &     B2DR*(Jome**8*omega + A2DR**8*ome**8*omega +   &
      &        2.*A2DR**4*Jome**4*ome**4*(2.*ome + omega)))*ov)/  &
      & (A2DR**4*Jome*ome**5*(3.*Jome**4 - 1.*A2DR**4*ome**4)*  &
      &    (2.*Jome*ov + vphiy) +   &
      &   B2DR*(Jome**8*ome*ov + 8.*A2DR**4*Jome**5*ome**6*ov +   &
      &      A2DR**8*ome**9*ov +   &
      &      2.*A2DR**4*Jome**4*ome**5*(ov + 2.*ome*vphiy)))
!
      djintdo =  &
      & (-0.25*A2DR*ome*(6.283185307179586*A2DR*B2DR*Jome**12*ov -   &
      &     20.*A2DR**3*B2DR*Jome**10*ome**2*ov -   &
      &     24.*A2DR**3*B2DR**2*Jome**9*ome**3*ov +   &
      &     18.84955592153876*A2DR**5*B2DR*Jome**8*ome**4*ov +   &
      &     37.69911184307752*A2DR**5*Jome**10*ome**4*ov +   &
      &     50.26548245743669*A2DR**5*B2DR*Jome**9*ome**5*ov -   &
      &     24.*A2DR**7*B2DR*Jome**6*ome**6*ov -   &
      &     48.*A2DR**7*Jome**8*ome**6*ov -   &
      &     32.*A2DR**7*B2DR**2*Jome**5*ome**7*ov -   &
      &     112.*A2DR**7*B2DR*Jome**7*ome**7*ov +   &
      &     18.84955592153876*A2DR**9*B2DR*Jome**4*ome**8*ov +   &
      &     25.132741228718345*A2DR**9*Jome**6*ome**8*ov -   &
      &     64.*A2DR**7*B2DR**2*Jome**6*ome**8*ov +   &
      &     50.26548245743669*A2DR**9*B2DR*Jome**5*ome**9*ov -   &
      &     4.*A2DR**11*B2DR*Jome**2*ome**10*ov +   &
      &     16.*A2DR**11*Jome**4*ome**10*ov -   &
      &     8.*A2DR**11*B2DR**2*Jome*ome**11*ov +   &
      &     16.*A2DR**11*B2DR*Jome**3*ome**11*ov +   &
      &     6.283185307179586*A2DR**13*B2DR*ome**12*ov -   &
      &     12.566370614359172*A2DR**13*Jome**2*ome**12*ov +   &
      &     24.*A2DR**3*B2DR*Jome**11*ome**2*omega*ov +   &
      &     32.*A2DR**3*B2DR**2*Jome**10*ome**3*omega*ov +   &
      &     16.*A2DR**7*B2DR*Jome**7*ome**6*omega*ov +   &
      &     32.*A2DR**7*B2DR**2*Jome**6*ome**7*omega*ov -   &
      &     8.*A2DR**11*B2DR*Jome**3*ome**10*omega*ov +   &
      &     18.84955592153876*A2DR**5*Jome**9*ome**4*vphiy +   &
      &     25.132741228718345*A2DR**5*B2DR*Jome**8*ome**5*vphiy -   &
      &     24.*A2DR**7*Jome**7*ome**6*vphiy -   &
      &     56.*A2DR**7*B2DR*Jome**6*ome**7*vphiy +   &
      &     12.566370614359172*A2DR**9*Jome**5*ome**8*vphiy -   &
      &     32.*A2DR**7*B2DR**2*Jome**5*ome**8*vphiy +   &
      &     25.132741228718345*A2DR**9*B2DR*Jome**4*ome**9*vphiy +   &
      &     8.*A2DR**11*Jome**3*ome**10*vphiy +   &
      &     8.*A2DR**11*B2DR*Jome**2*ome**11*vphiy -   &
      &     6.283185307179586*A2DR**13*Jome*ome**12*vphiy +   &
      &     12.*A2DR**3*B2DR*Jome**10*ome**2*omega*vphiy +   &
      &     16.*A2DR**3*B2DR**2*Jome**9*ome**3*omega*vphiy +   &
      &     8.*A2DR**7*B2DR*Jome**6*ome**6*omega*vphiy +   &
      &     16.*A2DR**7*B2DR**2*Jome**5*ome**7*omega*vphiy -   &
      &     4.*A2DR**11*B2DR*Jome**2*ome**10*omega*vphiy -   &
      &     2.*(2.*A2DR + 1.4142135623730951*B2DR)*  &
      &      (Jome**4 + A2DR**4*ome**4)*  &
      &      (A2DR**4*Jome*ome**4*(3.*Jome**4 - 1.*A2DR**4*ome**4)*  &
      &         (2.*Jome*ov + vphiy) +   &
      &        B2DR*(Jome**8*ov + 8.*A2DR**4*Jome**5*ome**5*ov +   &
      &           A2DR**8*ome**8*ov +   &
      &           2.*A2DR**4*Jome**4*ome**4*(ov + 2.*ome*vphiy)))*  &
      &      atan(1. - (1.4142135623730951*Jome)/(A2DR*ome)) -   &
      &     2.*(2.*A2DR - 1.4142135623730951*B2DR)*  &
      &      (Jome**4 + A2DR**4*ome**4)*  &
      &      (A2DR**4*Jome*ome**4*(3.*Jome**4 - 1.*A2DR**4*ome**4)*  &
      &         (2.*Jome*ov + vphiy) +   &
      &        B2DR*(Jome**8*ov + 8.*A2DR**4*Jome**5*ome**5*ov +   &
      &           A2DR**8*ome**8*ov +   &
      &           2.*A2DR**4*Jome**4*ome**4*(ov + 2.*ome*vphiy)))*  &
      &      atan(1. + (1.4142135623730951*Jome)/(A2DR*ome)) -   &
      &     1.4142135623730951*B2DR**2*Jome**12*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     4.242640687119286*A2DR**4*B2DR**2*Jome**8*ome**4*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     8.485281374238571*A2DR**4*B2DR*Jome**10*ome**4*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     11.313708498984761*A2DR**4*B2DR**2*Jome**9*ome**5*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     4.242640687119286*A2DR**8*B2DR**2*Jome**4*ome**8*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     5.656854249492381*A2DR**8*B2DR*Jome**6*ome**8*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     11.313708498984761*A2DR**8*B2DR**2*Jome**5*ome**9*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     1.4142135623730951*A2DR**12*B2DR**2*ome**12*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     2.8284271247461903*A2DR**12*B2DR*Jome**2*ome**12*ov*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     4.242640687119286*A2DR**4*B2DR*Jome**9*ome**4*vphiy*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     5.656854249492381*A2DR**4*B2DR**2*Jome**8*ome**5*vphiy*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     2.8284271247461903*A2DR**8*B2DR*Jome**5*ome**8*vphiy*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     5.656854249492381*A2DR**8*B2DR**2*Jome**4*ome**9*vphiy*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     1.4142135623730951*A2DR**12*B2DR*Jome*ome**12*vphiy*  &
      &      Log(Jome**2 - 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     1.4142135623730951*B2DR**2*Jome**12*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     4.242640687119286*A2DR**4*B2DR**2*Jome**8*ome**4*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     8.485281374238571*A2DR**4*B2DR*Jome**10*ome**4*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     11.313708498984761*A2DR**4*B2DR**2*Jome**9*ome**5*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     4.242640687119286*A2DR**8*B2DR**2*Jome**4*ome**8*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     5.656854249492381*A2DR**8*B2DR*Jome**6*ome**8*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     11.313708498984761*A2DR**8*B2DR**2*Jome**5*ome**9*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     1.4142135623730951*A2DR**12*B2DR**2*ome**12*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     2.8284271247461903*A2DR**12*B2DR*Jome**2*ome**12*ov*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     4.242640687119286*A2DR**4*B2DR*Jome**9*ome**4*vphiy*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     5.656854249492381*A2DR**4*B2DR**2*Jome**8*ome**5*vphiy*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     2.8284271247461903*A2DR**8*B2DR*Jome**5*ome**8*vphiy*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) +   &
      &     5.656854249492381*A2DR**8*B2DR**2*Jome**4*ome**9*vphiy*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2) -   &
      &     1.4142135623730951*A2DR**12*B2DR*Jome*ome**12*vphiy*  &
      &      Log(Jome**2 + 1.4142135623730951*A2DR*Jome*ome +   &
      &        A2DR**2*ome**2)))/  &
      & (B2DR*(Jome**4 + A2DR**4*ome**4)*  &
      &   (A2DR**4*Jome*ome**4*(3.*Jome**4 - 1.*A2DR**4*ome**4)*  &
      &      (2.*Jome*ov + vphiy) +   &
      &     B2DR*(Jome**8*ov + 8.*A2DR**4*Jome**5*ome**5*ov +   &
      &        A2DR**8*ome**8*ov +   &
      &        2.*A2DR**4*Jome**4*ome**4*(ov + 2.*ome*vphiy))))
!
!
      if (ii.eq.1) then ; dodoc_in  = dodoc ; djintdoin  = djintdo ; end if
      if (ii.eq.2) then ; dodoc_mid = dodoc ; djintdomid = djintdo ; end if
      if (ii.eq.3) then ; dodoc_out = dodoc ; djintdoout = djintdo ; end if
    end do
!
    dtermdoin = - pain**(2.d0*radi**2)*2.0d0*ovin*vphiyin*dodoc_in
    dtermdomid= - pamid**(2.d0*radi**2)*2.0d0*ovmid*vphiymid*dodoc_mid
    dtermdoout= - paout**(2.d0*radi**2)*2.0d0*ovout*vphiyout*dodoc_out
    dtermdrin =-dlog(pain)*4.d0*radi*pain**(2.d0*radi**2)*ov2in
    dtermdrmid=-dlog(pamid)*4.d0*radi*pamid**(2.d0*radi**2)*ov2mid
    dtermdrout=-dlog(paout)*4.d0*radi*paout**(2.d0*radi**2)*ov2out
!
    sgg(1) = -(radi**2*ain  + 0.5d0*dlog(termin)  + jint_in  - dlog(ber))
    sgg(2) = -(radi**2*aout + 0.5d0*dlog(termout) + jint_out - dlog(ber))
    sgg(3) = -(radi**2*amid + 0.5d0*dlog(termmid) + jint_mid - dlog(ber) &
    &        + loghc)
!
!  ain is ln(\alpha)
    gg(1,1) =   0.5d0*dtermdoin/termin + djintdoin
    gg(1,2) = - 1.0d0/ber
    gg(1,3) = 2.0d0*radi*ain + 0.5d0*dtermdrin/termin
!
    gg(2,1) =   0.5d0*dtermdoout/termout + djintdoout
    gg(2,2) = - 1.0d0/ber
    gg(2,3) = 2.0d0*radi*aout + 0.5d0*dtermdrout/termout
!
    gg(3,1) =   0.5d0*dtermdomid/termmid + djintdomid
    gg(3,2) = - 1.0d0/ber
    gg(3,3) = 2.0d0*radi*amid + 0.5d0*dtermdrmid/termmid
!
!    test
!!if (numero.eq.1) then
!! write (6,'(1p,3e12.4)') sgg(1), sgg(2), sgg(3)
!! write (6,'(1p,3e12.4)') gg(1,1), gg(1,2), gg(1,3)
!! write (6,'(1p,3e12.4)') gg(2,1), gg(2,2), gg(2,3)
!! write (6,'(1p,3e12.4)') gg(3,1), gg(3,2), gg(3,3)
!! write(6,*) 'matrix'
!! write (6,'(1p,3e12.4)') dodoc_in, djintdoin
!! write (6,'(1p,3e12.4)') dodoc_mid , djintdomid
!!end if
!stop
!!pause
!    test
    call minv(gg,sgg,3,4)
    ddome = sgg(1)
    ddber = sgg(2)
    ddradi = sgg(3)
    facfac = dmin1(dble(numero)/5.0d0,1.0d0)
    ome = ome + ddome*facfac
    ber = ber + ddber*facfac
    radi = radi + ddradi*facfac
    error = dmax1(dabs(ddome/ome),dabs(ddber/ber),dabs(ddradi/radi))
    numero = numero + 1
    if (numero>1000) then
      write(6,*)' numero = ', numero, '   error =',error
    end if
!      if (iter<10.and.numero>10) exit
    if (numero>1010) exit
!###    if (dabs(error)<1.0d-08) exit
    if (dabs(error)<1.0d-12) exit
  end do
!    test
!! write (6,*) "test values"
!! write (6,*) sgg(1), sgg(2), sgg(3)
!! write (6,*) 'update paramter', ome
!    test
!      write(6,*)' numero = ', numero, '  error = ',error
!
  if (radi < 0.d0) write(6,*) ' ### radi minus ###'
  if (radi < 0.d0) radi = - radi
  if (ome < 0.d0) write(6,*) ' ### ome minus ###'
  if (ome < 0.d0) ome = - ome
  if (ber < 0.d0) write(6,*) ' ### ber minus ###'
  if (ber < 0.d0) ber = - ber
  ome = convf*ome + (1.d0-convf)*omeold
  ber = convf*ber + (1.d0-convf)*berold
  radi = convf*radi + (1.d0-convf)*radiold
!
!
! --  Improving alpha and psi.  
!
  alph = alph**((radi/radiold)**2)
  psi = psi**((radi/radiold)**2)
!##############################################
  ut = 1/sqrt(alph(nrf,ntgxy,0)**2 & 
     -psi(nrf,ntgxy,0)**4*ov2out)
  hh = ber*ut
  emdtest = 1.0d0/(pinx+1.0d0)*(hh-1.0d0)
!!write (6,*) "h  = ", hh
!
end subroutine update_parameter_axisym_peos_drot
